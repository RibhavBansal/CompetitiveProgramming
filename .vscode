{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"BaseCode": {
		"prefix": "basecode",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"#define ll long long int",
			"const ll Q = 10e9 + 7;",
			"long long int m = 1000000007;\n",
			"int main(){",
			"\t$1",
			"\treturn 0;",
			"}"
		],
		"description": "This is BaseCode"
	},
	"Binaryfunh": {
		"prefix": "binaryfunh",
		"body": [
			"int binaryfunch(int a[], int size, int element)",
			"{",
			" int low, mid, high;",
			"low = 0;",
			" high = size - 1;",
			"while (low <= high)",
			"{",
			"mid = (low + high) / 2;",
			"if (a[mid] <= element)",
			"{",
			"low = mid + 1;",
			"}",
			"else",
			"{",
			"high = mid - 1;",
			"}",
			"}",
			"return mid;",
			"}",
		],
		"description": "This is Binary function highest index"
	},
	"Binaryfunl": {
		"prefix": "binaryfunl",
		"body": [
			"int binaryfuncl(int a[], int size, int element)",
			"{",
			" int low, mid, high;",
			"low = 0;",
			" high = size - 1;",
			"while (low <= high)",
			"{",
			"mid = (low + high) / 2;",
			"if (a[mid] <= element)",
			"{",
			"low = mid + 1;",
			"}",
			"else",
			"{",
			"high = mid - 1;",
			"}",
			"}",
			"return mid;",
			"}",
		],
		"description": "This is Binary function lowest index"
	},
	"PrintBinary": {
		"prefix": "printbinary",
		"body": [
			"void printBinary(int num){",
			"    for(int i=10;i>=0;--i){",
			"       cout<< ((num>>i)&1);",
			"    }",
			"    cout<<endl;",
			"}"
		],
		"description": "This is Binary conversion"
	},
	"IsPrime": {
		"prefix": "isprime",
		"body": [
			"int z= 1e7+10;",
			"vector<bool> isPrime(z,1);",
			"",
			"isPrime[0] = isPrime[1] = false;",
			"for(int i=2;i<z;++i){",
			"    if(isPrime[i] == true){",
			"        for(int j=2*i;j<z;j+=i){",
			"             isPrime[j] = false;",
			"        }",
			"    }",
			"}",
		],
		"description": "This is Prime check"
	},
	"HighestPrime": {
		"prefix": "highestp",
		"body": [
			"int z= 1e7+10;",
			"vector<bool> isPrime(z,1);",
			"vector<int> lp(z,0), hp(z,0);",
			"",
			"isPrime[0] = isPrime[1] = false;",
			"for(int i=2;i<z;++i){",
			"    if(isPrime[i] == true){",
			"        lp[i] = hp[i] = i;",
			"        for(int j=2*i;j<z;j+=i){",
			"             isPrime[j] = false;",
			"             hp[j] = i;",
			"             if(lp[j] == 0){",
			"                 lp[j] = i;",
			"             }",
			"        }",
			"    }",
			"}",
		],
		"description": "Finding highest prime"
	},
	"LowestPrime": {
		"prefix": "lowestp",
		"body": [
			"int z= 1e7+10;",
			"vector<bool> isPrime(z,1);",
			"vector<int> lp(z,0), hp(z,0);",
			"",
			"isPrime[0] = isPrime[1] = false;",
			"for(int i=2;i<z;++i){",
			"    if(isPrime[i] == true){",
			"        lp[i] = hp[i] = i;",
			"        for(int j=2*i;j<z;j+=i){",
			"             isPrime[j] = false;",
			"             hp[j] = i;",
			"             if(lp[j] == 0){",
			"                 lp[j] = i;",
			"             }",
			"        }",
			"    }",
			"}",
		],
		"description": "Finding lowest prime"
	},
	"PrimeFactorisation": {
		"prefix": "primefactors",
		"body": [
			"int z= 1e7+10;",
			"vector<bool> isPrime(z,1);",
			"vector<int> lp(z,0), hp(z,0);",
			"",
			"isPrime[0] = isPrime[1] = false;",
			"for(int i=2;i<z;++i){",
			"    if(isPrime[i] == true){",
			"        lp[i] = hp[i] = i;",
			"        for(int j=2*i;j<z;j+=i){",
			"             isPrime[j] = false;",
			"             hp[j] = i;",
			"             if(lp[j] == 0){",
			"                 lp[j] = i;",
			"             }",
			"        }",
			"    }",
			"}",
			"",
			"int num;",
			"cin>>num;",
			"vector<int>prime_factors;",
			"",
			"while(num > 1){",
			"    int factor = hp[num];",
			"    while(num % factor == 0){",
			"        num /= factor;",
			"        prime_factors.push_back(factor);",
			"    }",
			"}",
			"",
			"for(int i : prime_factors){",
			"   cout<< i << ' ';",
			"}",
		],
		"description": "Finding prime factors"
	},
	"Binaryfun": {
		"prefix": "binaryfun",
		"body": [
			"int binaryfunc(int a[], int size, int element)",
			"{",
			"int low, mid, high;",
			"low = 0;",
			"high = size - 1;",
			"while (low <= high)",
			"{",
			" mid = (low + high) / 2;",
			" if (a[mid] == element)",
			"{",
			"return mid;",
			"}",
			"else if (a[mid] < element)",
			"{",
			"    low = mid + 1;",
			"}",
			"else",
			"{",
			"    high = mid - 1;",
			"}",
			"}",
			"return -1;",
			"}",
		],
		"description": "This is Binary search"
	},
}
